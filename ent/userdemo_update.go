// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echoDemo/ent/predicate"
	"echoDemo/ent/userdemo"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDemoUpdate is the builder for updating UserDemo entities.
type UserDemoUpdate struct {
	config
	hooks    []Hook
	mutation *UserDemoMutation
}

// Where appends a list predicates to the UserDemoUpdate builder.
func (udu *UserDemoUpdate) Where(ps ...predicate.UserDemo) *UserDemoUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetName sets the "name" field.
func (udu *UserDemoUpdate) SetName(s string) *UserDemoUpdate {
	udu.mutation.SetName(s)
	return udu
}

// SetAge sets the "age" field.
func (udu *UserDemoUpdate) SetAge(s string) *UserDemoUpdate {
	udu.mutation.SetAge(s)
	return udu
}

// SetGender sets the "gender" field.
func (udu *UserDemoUpdate) SetGender(b bool) *UserDemoUpdate {
	udu.mutation.SetGender(b)
	return udu
}

// SetCreatedAt sets the "created_at" field.
func (udu *UserDemoUpdate) SetCreatedAt(t time.Time) *UserDemoUpdate {
	udu.mutation.SetCreatedAt(t)
	return udu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (udu *UserDemoUpdate) SetNillableCreatedAt(t *time.Time) *UserDemoUpdate {
	if t != nil {
		udu.SetCreatedAt(*t)
	}
	return udu
}

// SetUpdatedAt sets the "updated_at" field.
func (udu *UserDemoUpdate) SetUpdatedAt(t time.Time) *UserDemoUpdate {
	udu.mutation.SetUpdatedAt(t)
	return udu
}

// Mutation returns the UserDemoMutation object of the builder.
func (udu *UserDemoUpdate) Mutation() *UserDemoMutation {
	return udu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDemoUpdate) Save(ctx context.Context) (int, error) {
	udu.defaults()
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDemoUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDemoUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDemoUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udu *UserDemoUpdate) defaults() {
	if _, ok := udu.mutation.UpdatedAt(); !ok {
		v := userdemo.UpdateDefaultUpdatedAt()
		udu.mutation.SetUpdatedAt(v)
	}
}

func (udu *UserDemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userdemo.Table, userdemo.Columns, sqlgraph.NewFieldSpec(userdemo.FieldID, field.TypeString))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.Name(); ok {
		_spec.SetField(userdemo.FieldName, field.TypeString, value)
	}
	if value, ok := udu.mutation.Age(); ok {
		_spec.SetField(userdemo.FieldAge, field.TypeString, value)
	}
	if value, ok := udu.mutation.Gender(); ok {
		_spec.SetField(userdemo.FieldGender, field.TypeBool, value)
	}
	if value, ok := udu.mutation.CreatedAt(); ok {
		_spec.SetField(userdemo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := udu.mutation.UpdatedAt(); ok {
		_spec.SetField(userdemo.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdemo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UserDemoUpdateOne is the builder for updating a single UserDemo entity.
type UserDemoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDemoMutation
}

// SetName sets the "name" field.
func (uduo *UserDemoUpdateOne) SetName(s string) *UserDemoUpdateOne {
	uduo.mutation.SetName(s)
	return uduo
}

// SetAge sets the "age" field.
func (uduo *UserDemoUpdateOne) SetAge(s string) *UserDemoUpdateOne {
	uduo.mutation.SetAge(s)
	return uduo
}

// SetGender sets the "gender" field.
func (uduo *UserDemoUpdateOne) SetGender(b bool) *UserDemoUpdateOne {
	uduo.mutation.SetGender(b)
	return uduo
}

// SetCreatedAt sets the "created_at" field.
func (uduo *UserDemoUpdateOne) SetCreatedAt(t time.Time) *UserDemoUpdateOne {
	uduo.mutation.SetCreatedAt(t)
	return uduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uduo *UserDemoUpdateOne) SetNillableCreatedAt(t *time.Time) *UserDemoUpdateOne {
	if t != nil {
		uduo.SetCreatedAt(*t)
	}
	return uduo
}

// SetUpdatedAt sets the "updated_at" field.
func (uduo *UserDemoUpdateOne) SetUpdatedAt(t time.Time) *UserDemoUpdateOne {
	uduo.mutation.SetUpdatedAt(t)
	return uduo
}

// Mutation returns the UserDemoMutation object of the builder.
func (uduo *UserDemoUpdateOne) Mutation() *UserDemoMutation {
	return uduo.mutation
}

// Where appends a list predicates to the UserDemoUpdate builder.
func (uduo *UserDemoUpdateOne) Where(ps ...predicate.UserDemo) *UserDemoUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDemoUpdateOne) Select(field string, fields ...string) *UserDemoUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDemo entity.
func (uduo *UserDemoUpdateOne) Save(ctx context.Context) (*UserDemo, error) {
	uduo.defaults()
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDemoUpdateOne) SaveX(ctx context.Context) *UserDemo {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDemoUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDemoUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uduo *UserDemoUpdateOne) defaults() {
	if _, ok := uduo.mutation.UpdatedAt(); !ok {
		v := userdemo.UpdateDefaultUpdatedAt()
		uduo.mutation.SetUpdatedAt(v)
	}
}

func (uduo *UserDemoUpdateOne) sqlSave(ctx context.Context) (_node *UserDemo, err error) {
	_spec := sqlgraph.NewUpdateSpec(userdemo.Table, userdemo.Columns, sqlgraph.NewFieldSpec(userdemo.FieldID, field.TypeString))
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDemo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdemo.FieldID)
		for _, f := range fields {
			if !userdemo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdemo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.Name(); ok {
		_spec.SetField(userdemo.FieldName, field.TypeString, value)
	}
	if value, ok := uduo.mutation.Age(); ok {
		_spec.SetField(userdemo.FieldAge, field.TypeString, value)
	}
	if value, ok := uduo.mutation.Gender(); ok {
		_spec.SetField(userdemo.FieldGender, field.TypeBool, value)
	}
	if value, ok := uduo.mutation.CreatedAt(); ok {
		_spec.SetField(userdemo.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uduo.mutation.UpdatedAt(); ok {
		_spec.SetField(userdemo.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &UserDemo{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdemo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
