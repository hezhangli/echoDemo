// Code generated by ent, DO NOT EDIT.

package ent

import (
	"echoDemo/ent/userdemo"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserDemo is the model entity for the UserDemo schema.
type UserDemo struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Age holds the value of the "age" field.
	Age string `json:"age,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender bool `json:"gender,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserDemo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userdemo.FieldGender:
			values[i] = new(sql.NullBool)
		case userdemo.FieldID, userdemo.FieldName, userdemo.FieldAge:
			values[i] = new(sql.NullString)
		case userdemo.FieldCreatedAt, userdemo.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserDemo fields.
func (ud *UserDemo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userdemo.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ud.ID = value.String
			}
		case userdemo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ud.Name = value.String
			}
		case userdemo.FieldAge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				ud.Age = value.String
			}
		case userdemo.FieldGender:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				ud.Gender = value.Bool
			}
		case userdemo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ud.CreatedAt = value.Time
			}
		case userdemo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ud.UpdatedAt = value.Time
			}
		default:
			ud.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserDemo.
// This includes values selected through modifiers, order, etc.
func (ud *UserDemo) Value(name string) (ent.Value, error) {
	return ud.selectValues.Get(name)
}

// Update returns a builder for updating this UserDemo.
// Note that you need to call UserDemo.Unwrap() before calling this method if this UserDemo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ud *UserDemo) Update() *UserDemoUpdateOne {
	return NewUserDemoClient(ud.config).UpdateOne(ud)
}

// Unwrap unwraps the UserDemo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ud *UserDemo) Unwrap() *UserDemo {
	_tx, ok := ud.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserDemo is not a transactional entity")
	}
	ud.config.driver = _tx.drv
	return ud
}

// String implements the fmt.Stringer.
func (ud *UserDemo) String() string {
	var builder strings.Builder
	builder.WriteString("UserDemo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ud.ID))
	builder.WriteString("name=")
	builder.WriteString(ud.Name)
	builder.WriteString(", ")
	builder.WriteString("age=")
	builder.WriteString(ud.Age)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", ud.Gender))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ud.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ud.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserDemos is a parsable slice of UserDemo.
type UserDemos []*UserDemo
