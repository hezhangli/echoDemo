// Code generated by ent, DO NOT EDIT.

package user

import (
	"echoDemo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldID, id))
}

// Hash applies equality check predicate on the "hash" field. It's identical to HashEQ.
func Hash(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHash, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// QiniuFilePath applies equality check predicate on the "qiniu_file_path" field. It's identical to QiniuFilePathEQ.
func QiniuFilePath(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQiniuFilePath, v))
}

// QiniuTxPath applies equality check predicate on the "qiniu_tx_path" field. It's identical to QiniuTxPathEQ.
func QiniuTxPath(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQiniuTxPath, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserID, v))
}

// WxID applies equality check predicate on the "wx_id" field. It's identical to WxIDEQ.
func WxID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWxID, v))
}

// CorpID applies equality check predicate on the "corp_id" field. It's identical to CorpIDEQ.
func CorpID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCorpID, v))
}

// DeptID applies equality check predicate on the "dept_id" field. It's identical to DeptIDEQ.
func DeptID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeptID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// HashEQ applies the EQ predicate on the "hash" field.
func HashEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHash, v))
}

// HashNEQ applies the NEQ predicate on the "hash" field.
func HashNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHash, v))
}

// HashIn applies the In predicate on the "hash" field.
func HashIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldHash, vs...))
}

// HashNotIn applies the NotIn predicate on the "hash" field.
func HashNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHash, vs...))
}

// HashGT applies the GT predicate on the "hash" field.
func HashGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldHash, v))
}

// HashGTE applies the GTE predicate on the "hash" field.
func HashGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHash, v))
}

// HashLT applies the LT predicate on the "hash" field.
func HashLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldHash, v))
}

// HashLTE applies the LTE predicate on the "hash" field.
func HashLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHash, v))
}

// HashContains applies the Contains predicate on the "hash" field.
func HashContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldHash, v))
}

// HashHasPrefix applies the HasPrefix predicate on the "hash" field.
func HashHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldHash, v))
}

// HashHasSuffix applies the HasSuffix predicate on the "hash" field.
func HashHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldHash, v))
}

// HashEqualFold applies the EqualFold predicate on the "hash" field.
func HashEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldHash, v))
}

// HashContainsFold applies the ContainsFold predicate on the "hash" field.
func HashContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldHash, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// QiniuFilePathEQ applies the EQ predicate on the "qiniu_file_path" field.
func QiniuFilePathEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQiniuFilePath, v))
}

// QiniuFilePathNEQ applies the NEQ predicate on the "qiniu_file_path" field.
func QiniuFilePathNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldQiniuFilePath, v))
}

// QiniuFilePathIn applies the In predicate on the "qiniu_file_path" field.
func QiniuFilePathIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldQiniuFilePath, vs...))
}

// QiniuFilePathNotIn applies the NotIn predicate on the "qiniu_file_path" field.
func QiniuFilePathNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldQiniuFilePath, vs...))
}

// QiniuFilePathGT applies the GT predicate on the "qiniu_file_path" field.
func QiniuFilePathGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldQiniuFilePath, v))
}

// QiniuFilePathGTE applies the GTE predicate on the "qiniu_file_path" field.
func QiniuFilePathGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldQiniuFilePath, v))
}

// QiniuFilePathLT applies the LT predicate on the "qiniu_file_path" field.
func QiniuFilePathLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldQiniuFilePath, v))
}

// QiniuFilePathLTE applies the LTE predicate on the "qiniu_file_path" field.
func QiniuFilePathLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldQiniuFilePath, v))
}

// QiniuFilePathContains applies the Contains predicate on the "qiniu_file_path" field.
func QiniuFilePathContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldQiniuFilePath, v))
}

// QiniuFilePathHasPrefix applies the HasPrefix predicate on the "qiniu_file_path" field.
func QiniuFilePathHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldQiniuFilePath, v))
}

// QiniuFilePathHasSuffix applies the HasSuffix predicate on the "qiniu_file_path" field.
func QiniuFilePathHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldQiniuFilePath, v))
}

// QiniuFilePathEqualFold applies the EqualFold predicate on the "qiniu_file_path" field.
func QiniuFilePathEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldQiniuFilePath, v))
}

// QiniuFilePathContainsFold applies the ContainsFold predicate on the "qiniu_file_path" field.
func QiniuFilePathContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldQiniuFilePath, v))
}

// QiniuTxPathEQ applies the EQ predicate on the "qiniu_tx_path" field.
func QiniuTxPathEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQiniuTxPath, v))
}

// QiniuTxPathNEQ applies the NEQ predicate on the "qiniu_tx_path" field.
func QiniuTxPathNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldQiniuTxPath, v))
}

// QiniuTxPathIn applies the In predicate on the "qiniu_tx_path" field.
func QiniuTxPathIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldQiniuTxPath, vs...))
}

// QiniuTxPathNotIn applies the NotIn predicate on the "qiniu_tx_path" field.
func QiniuTxPathNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldQiniuTxPath, vs...))
}

// QiniuTxPathGT applies the GT predicate on the "qiniu_tx_path" field.
func QiniuTxPathGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldQiniuTxPath, v))
}

// QiniuTxPathGTE applies the GTE predicate on the "qiniu_tx_path" field.
func QiniuTxPathGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldQiniuTxPath, v))
}

// QiniuTxPathLT applies the LT predicate on the "qiniu_tx_path" field.
func QiniuTxPathLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldQiniuTxPath, v))
}

// QiniuTxPathLTE applies the LTE predicate on the "qiniu_tx_path" field.
func QiniuTxPathLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldQiniuTxPath, v))
}

// QiniuTxPathContains applies the Contains predicate on the "qiniu_tx_path" field.
func QiniuTxPathContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldQiniuTxPath, v))
}

// QiniuTxPathHasPrefix applies the HasPrefix predicate on the "qiniu_tx_path" field.
func QiniuTxPathHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldQiniuTxPath, v))
}

// QiniuTxPathHasSuffix applies the HasSuffix predicate on the "qiniu_tx_path" field.
func QiniuTxPathHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldQiniuTxPath, v))
}

// QiniuTxPathEqualFold applies the EqualFold predicate on the "qiniu_tx_path" field.
func QiniuTxPathEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldQiniuTxPath, v))
}

// QiniuTxPathContainsFold applies the ContainsFold predicate on the "qiniu_tx_path" field.
func QiniuTxPathContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldQiniuTxPath, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUserID, v))
}

// WxIDEQ applies the EQ predicate on the "wx_id" field.
func WxIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWxID, v))
}

// WxIDNEQ applies the NEQ predicate on the "wx_id" field.
func WxIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWxID, v))
}

// WxIDIn applies the In predicate on the "wx_id" field.
func WxIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWxID, vs...))
}

// WxIDNotIn applies the NotIn predicate on the "wx_id" field.
func WxIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWxID, vs...))
}

// WxIDGT applies the GT predicate on the "wx_id" field.
func WxIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWxID, v))
}

// WxIDGTE applies the GTE predicate on the "wx_id" field.
func WxIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWxID, v))
}

// WxIDLT applies the LT predicate on the "wx_id" field.
func WxIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWxID, v))
}

// WxIDLTE applies the LTE predicate on the "wx_id" field.
func WxIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWxID, v))
}

// WxIDContains applies the Contains predicate on the "wx_id" field.
func WxIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWxID, v))
}

// WxIDHasPrefix applies the HasPrefix predicate on the "wx_id" field.
func WxIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWxID, v))
}

// WxIDHasSuffix applies the HasSuffix predicate on the "wx_id" field.
func WxIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWxID, v))
}

// WxIDEqualFold applies the EqualFold predicate on the "wx_id" field.
func WxIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWxID, v))
}

// WxIDContainsFold applies the ContainsFold predicate on the "wx_id" field.
func WxIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWxID, v))
}

// CorpIDEQ applies the EQ predicate on the "corp_id" field.
func CorpIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCorpID, v))
}

// CorpIDNEQ applies the NEQ predicate on the "corp_id" field.
func CorpIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCorpID, v))
}

// CorpIDIn applies the In predicate on the "corp_id" field.
func CorpIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldCorpID, vs...))
}

// CorpIDNotIn applies the NotIn predicate on the "corp_id" field.
func CorpIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCorpID, vs...))
}

// CorpIDGT applies the GT predicate on the "corp_id" field.
func CorpIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldCorpID, v))
}

// CorpIDGTE applies the GTE predicate on the "corp_id" field.
func CorpIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCorpID, v))
}

// CorpIDLT applies the LT predicate on the "corp_id" field.
func CorpIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldCorpID, v))
}

// CorpIDLTE applies the LTE predicate on the "corp_id" field.
func CorpIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCorpID, v))
}

// CorpIDContains applies the Contains predicate on the "corp_id" field.
func CorpIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldCorpID, v))
}

// CorpIDHasPrefix applies the HasPrefix predicate on the "corp_id" field.
func CorpIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldCorpID, v))
}

// CorpIDHasSuffix applies the HasSuffix predicate on the "corp_id" field.
func CorpIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldCorpID, v))
}

// CorpIDEqualFold applies the EqualFold predicate on the "corp_id" field.
func CorpIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldCorpID, v))
}

// CorpIDContainsFold applies the ContainsFold predicate on the "corp_id" field.
func CorpIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldCorpID, v))
}

// DeptIDEQ applies the EQ predicate on the "dept_id" field.
func DeptIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeptID, v))
}

// DeptIDNEQ applies the NEQ predicate on the "dept_id" field.
func DeptIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeptID, v))
}

// DeptIDIn applies the In predicate on the "dept_id" field.
func DeptIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeptID, vs...))
}

// DeptIDNotIn applies the NotIn predicate on the "dept_id" field.
func DeptIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeptID, vs...))
}

// DeptIDGT applies the GT predicate on the "dept_id" field.
func DeptIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeptID, v))
}

// DeptIDGTE applies the GTE predicate on the "dept_id" field.
func DeptIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeptID, v))
}

// DeptIDLT applies the LT predicate on the "dept_id" field.
func DeptIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeptID, v))
}

// DeptIDLTE applies the LTE predicate on the "dept_id" field.
func DeptIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeptID, v))
}

// DeptIDContains applies the Contains predicate on the "dept_id" field.
func DeptIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDeptID, v))
}

// DeptIDHasPrefix applies the HasPrefix predicate on the "dept_id" field.
func DeptIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDeptID, v))
}

// DeptIDHasSuffix applies the HasSuffix predicate on the "dept_id" field.
func DeptIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDeptID, v))
}

// DeptIDEqualFold applies the EqualFold predicate on the "dept_id" field.
func DeptIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDeptID, v))
}

// DeptIDContainsFold applies the ContainsFold predicate on the "dept_id" field.
func DeptIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDeptID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
