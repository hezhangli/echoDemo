// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"echoDemo/ent/userdemo"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDemoCreate is the builder for creating a UserDemo entity.
type UserDemoCreate struct {
	config
	mutation *UserDemoMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (udc *UserDemoCreate) SetName(s string) *UserDemoCreate {
	udc.mutation.SetName(s)
	return udc
}

// SetAge sets the "age" field.
func (udc *UserDemoCreate) SetAge(s string) *UserDemoCreate {
	udc.mutation.SetAge(s)
	return udc
}

// SetGender sets the "gender" field.
func (udc *UserDemoCreate) SetGender(b bool) *UserDemoCreate {
	udc.mutation.SetGender(b)
	return udc
}

// SetCreatedAt sets the "created_at" field.
func (udc *UserDemoCreate) SetCreatedAt(t time.Time) *UserDemoCreate {
	udc.mutation.SetCreatedAt(t)
	return udc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (udc *UserDemoCreate) SetNillableCreatedAt(t *time.Time) *UserDemoCreate {
	if t != nil {
		udc.SetCreatedAt(*t)
	}
	return udc
}

// SetUpdatedAt sets the "updated_at" field.
func (udc *UserDemoCreate) SetUpdatedAt(t time.Time) *UserDemoCreate {
	udc.mutation.SetUpdatedAt(t)
	return udc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (udc *UserDemoCreate) SetNillableUpdatedAt(t *time.Time) *UserDemoCreate {
	if t != nil {
		udc.SetUpdatedAt(*t)
	}
	return udc
}

// SetID sets the "id" field.
func (udc *UserDemoCreate) SetID(s string) *UserDemoCreate {
	udc.mutation.SetID(s)
	return udc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (udc *UserDemoCreate) SetNillableID(s *string) *UserDemoCreate {
	if s != nil {
		udc.SetID(*s)
	}
	return udc
}

// Mutation returns the UserDemoMutation object of the builder.
func (udc *UserDemoCreate) Mutation() *UserDemoMutation {
	return udc.mutation
}

// Save creates the UserDemo in the database.
func (udc *UserDemoCreate) Save(ctx context.Context) (*UserDemo, error) {
	udc.defaults()
	return withHooks(ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDemoCreate) SaveX(ctx context.Context) *UserDemo {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDemoCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDemoCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udc *UserDemoCreate) defaults() {
	if _, ok := udc.mutation.CreatedAt(); !ok {
		v := userdemo.DefaultCreatedAt()
		udc.mutation.SetCreatedAt(v)
	}
	if _, ok := udc.mutation.UpdatedAt(); !ok {
		v := userdemo.DefaultUpdatedAt()
		udc.mutation.SetUpdatedAt(v)
	}
	if _, ok := udc.mutation.ID(); !ok {
		v := userdemo.DefaultID()
		udc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDemoCreate) check() error {
	if _, ok := udc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UserDemo.name"`)}
	}
	if _, ok := udc.mutation.Age(); !ok {
		return &ValidationError{Name: "age", err: errors.New(`ent: missing required field "UserDemo.age"`)}
	}
	if _, ok := udc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "UserDemo.gender"`)}
	}
	if _, ok := udc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserDemo.created_at"`)}
	}
	if _, ok := udc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserDemo.updated_at"`)}
	}
	return nil
}

func (udc *UserDemoCreate) sqlSave(ctx context.Context) (*UserDemo, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UserDemo.ID type: %T", _spec.ID.Value)
		}
	}
	udc.mutation.id = &_node.ID
	udc.mutation.done = true
	return _node, nil
}

func (udc *UserDemoCreate) createSpec() (*UserDemo, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDemo{config: udc.config}
		_spec = sqlgraph.NewCreateSpec(userdemo.Table, sqlgraph.NewFieldSpec(userdemo.FieldID, field.TypeString))
	)
	if id, ok := udc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udc.mutation.Name(); ok {
		_spec.SetField(userdemo.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := udc.mutation.Age(); ok {
		_spec.SetField(userdemo.FieldAge, field.TypeString, value)
		_node.Age = value
	}
	if value, ok := udc.mutation.Gender(); ok {
		_spec.SetField(userdemo.FieldGender, field.TypeBool, value)
		_node.Gender = value
	}
	if value, ok := udc.mutation.CreatedAt(); ok {
		_spec.SetField(userdemo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := udc.mutation.UpdatedAt(); ok {
		_spec.SetField(userdemo.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// UserDemoCreateBulk is the builder for creating many UserDemo entities in bulk.
type UserDemoCreateBulk struct {
	config
	builders []*UserDemoCreate
}

// Save creates the UserDemo entities in the database.
func (udcb *UserDemoCreateBulk) Save(ctx context.Context) ([]*UserDemo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDemo, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDemoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDemoCreateBulk) SaveX(ctx context.Context) []*UserDemo {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDemoCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDemoCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
